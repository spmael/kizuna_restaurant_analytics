# Generated by Django 4.2.7 on 2025-08-13 20:45

from decimal import Decimal
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DailySummary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this object was created.",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time this object was last updated.",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "date",
                    models.DateField(db_index=True, unique=True, verbose_name="Date"),
                ),
                (
                    "total_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue for the day",
                        max_digits=15,
                        verbose_name="Total Sales",
                    ),
                ),
                (
                    "total_orders",
                    models.IntegerField(
                        default=0,
                        help_text="Total number of orders for the day",
                        verbose_name="Total Orders",
                    ),
                ),
                (
                    "total_customers",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of customers served (covers)",
                        verbose_name="Total Customers",
                    ),
                ),
                (
                    "average_order_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total Sales ÷ Total Orders",
                        max_digits=15,
                        verbose_name="Average Order Value",
                    ),
                ),
                (
                    "average_ticket_size",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total Sales ÷ Total Customers",
                        max_digits=15,
                        verbose_name="Average Ticket Size",
                    ),
                ),
                (
                    "cash_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue from cash payments",
                        max_digits=15,
                        verbose_name="Cash Sales",
                    ),
                ),
                (
                    "mobile_money_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue from mobile money payments",
                        max_digits=15,
                        verbose_name="Mobile Money Sales",
                    ),
                ),
                (
                    "credit_card_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue from credit card payments",
                        max_digits=15,
                        verbose_name="Credit Card Sales",
                    ),
                ),
                (
                    "other_payment_methods_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue from other payment methods",
                        max_digits=15,
                        verbose_name="Other Payment Methods Sales",
                    ),
                ),
                (
                    "total_food_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total cost of food for the day",
                        max_digits=15,
                        verbose_name="Total Food Cost",
                    ),
                ),
                (
                    "total_food_cost_conservative",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="COGS using only actual purchase data",
                        max_digits=15,
                        verbose_name="Food Cost (Conservative)",
                    ),
                ),
                (
                    "cogs_confidence_level",
                    models.CharField(
                        choices=[
                            ("HIGH", "High (90%+ actual data)"),
                            ("MEDIUM", "Medium (70-89% actual data)"),
                            ("LOW", "Low (50-69% actual data)"),
                            ("VERY_LOW", "Very Low (<50% actual data)"),
                        ],
                        default="HIGH",
                        max_length=10,
                        verbose_name="COGS Confidence",
                    ),
                ),
                (
                    "data_completeness_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("100"),
                        max_digits=5,
                        verbose_name="Data Completeness %",
                    ),
                ),
                (
                    "missing_ingredients_count",
                    models.IntegerField(default=0, verbose_name="Missing Ingredients"),
                ),
                (
                    "estimated_ingredients_count",
                    models.IntegerField(
                        default=0, verbose_name="Estimated Ingredients"
                    ),
                ),
                (
                    "cogs_calculation_notes",
                    models.TextField(blank=True, verbose_name="COGS Notes"),
                ),
                (
                    "resale_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Cost of products bought and resold directly (bottled drinks, packaged snacks, etc.)",
                        max_digits=15,
                        verbose_name="Resale Cost",
                    ),
                ),
                (
                    "food_cost_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Industry standard: 25-35%",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Food Cost %",
                    ),
                ),
                (
                    "gross_profit",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total Sales - Total Food Cost - Resale Cost",
                        max_digits=15,
                        verbose_name="Gross Profit",
                    ),
                ),
                (
                    "gross_profit_margin",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="(Gross Profit ÷ Total Sales) × 100",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Gross Profit Margin %",
                    ),
                ),
                (
                    "total_items_sold",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total quantity of all products sold",
                        verbose_name="Total Items Sold",
                    ),
                ),
                (
                    "average_items_per_order",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total Items Sold ÷ Total Orders",
                        max_digits=15,
                        verbose_name="Average Items per Order",
                    ),
                ),
                (
                    "dine_in_orders",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of dine-in orders for the day",
                        verbose_name="Dine-in Orders",
                    ),
                ),
                (
                    "take_out_orders",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of take-out orders for the day",
                        verbose_name="Take-out Orders",
                    ),
                ),
                (
                    "delivery_orders",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of delivery orders for the day",
                        verbose_name="Delivery Orders",
                    ),
                ),
                (
                    "lunch_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue from lunch orders",
                        max_digits=15,
                        verbose_name="Lunch Sales",
                    ),
                ),
                (
                    "dinner_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue from dinner orders",
                        max_digits=15,
                        verbose_name="Dinner Sales",
                    ),
                ),
                (
                    "peak_hour_sales",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total sales revenue from peak hour orders",
                        max_digits=15,
                        verbose_name="Peak Hour Sales",
                    ),
                ),
                (
                    "peak_hour_time",
                    models.TimeField(
                        blank=True,
                        help_text="Time of day with highest sales volume",
                        null=True,
                        verbose_name="Peak Hour Time",
                    ),
                ),
                (
                    "waste_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total cost of food wasted for the day",
                        max_digits=15,
                        verbose_name="Waste Cost",
                    ),
                ),
                (
                    "comps_and_discounts",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Free items and discounts given to customers",
                        max_digits=15,
                        verbose_name="Comps and Discounts",
                    ),
                ),
                (
                    "staff_count",
                    models.IntegerField(
                        default=0,
                        help_text="Total number of staff for the day",
                        verbose_name="Staff Count",
                    ),
                ),
                (
                    "sales_per_staff",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total Sales ÷ Total Staff",
                        max_digits=15,
                        verbose_name="Sales per Staff",
                    ),
                ),
                (
                    "weather_conditions",
                    models.CharField(
                        choices=[
                            ("sunny", "Sunny"),
                            ("cloudy", "Cloudy"),
                            ("rainy", "Rainy"),
                            ("stormy", "Stormy"),
                        ],
                        default="sunny",
                        help_text="Weather conditions for the day",
                        max_length=255,
                        verbose_name="Weather Conditions",
                    ),
                ),
                (
                    "is_holiday",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the day is a holiday",
                        verbose_name="Is Holiday",
                    ),
                ),
                (
                    "special_events",
                    models.CharField(
                        blank=True,
                        help_text="Any special events, promotions, or circumstances",
                        max_length=255,
                        verbose_name="Special Events",
                    ),
                ),
                (
                    "manager_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes from the manager for the day",
                        null=True,
                        verbose_name="Manager Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Daily Summary",
                "verbose_name_plural": "Daily Summaries",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="ProductCostHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("purchase_date", models.DateTimeField(verbose_name="Purchase Date")),
                (
                    "quantity_ordered",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Original quantity as ordered/purchased",
                        max_digits=15,
                        verbose_name="Quantity Ordered",
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total monetary cost of the purchase",
                        max_digits=15,
                        verbose_name="Total Amount",
                    ),
                ),
                (
                    "recipe_conversion_factor",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Factor used to convert from purchase unit to recipe unit",
                        max_digits=15,
                        verbose_name="Recipe Conversion Factor",
                    ),
                ),
                (
                    "recipe_quantity",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Quantity converted to recipe units",
                        max_digits=15,
                        verbose_name="Recipe Quantity",
                    ),
                ),
                (
                    "unit_cost_in_recipe_units",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0"),
                        help_text="Cost per unit in recipe units",
                        max_digits=15,
                        verbose_name="Unit Cost in Recipe Units",
                    ),
                ),
                (
                    "cost_per_unit",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Cost per unit (legacy field, use unit_cost_in_recipe_units)",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                        verbose_name="Cost per Unit",
                    ),
                ),
                (
                    "quantity_purchased",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Quantity purchased (legacy field, use recipe_quantity)",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.001"))
                        ],
                        verbose_name="Quantity Purchased",
                    ),
                ),
                (
                    "weight_factor",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("1.0000"),
                        help_text="Weight for average calculation (1.0 = full weight)",
                        max_digits=5,
                        verbose_name="Weight Factor",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Product Cost History",
                "verbose_name_plural": "Product Cost Histories",
                "ordering": ["-purchase_date"],
            },
        ),
    ]
