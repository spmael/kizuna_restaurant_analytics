# Generated by Django 4.2.7 on 2025-09-02 19:36

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("restaurant_data", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Recipe",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "dish_name",
                    models.CharField(max_length=255, verbose_name="Dish Name"),
                ),
                (
                    "dish_name_fr",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="French Dish Name"
                    ),
                ),
                (
                    "dish_name_en",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="English Dish Name"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("starter", "Starter"),
                            ("main", "Main"),
                            ("dessert", "Dessert"),
                            ("drink", "Drink"),
                            ("salad", "Salad"),
                            ("soup", "Soup"),
                            ("side", "Side"),
                            ("snack", "Snack"),
                            ("other", "Other"),
                        ],
                        max_length=255,
                        verbose_name="Category",
                    ),
                ),
                (
                    "serving_size",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("1.000"),
                        help_text="number of portfions this recipe makes",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.001"))
                        ],
                        verbose_name="Serving Size",
                    ),
                ),
                (
                    "portion_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Weight of each portion in grams",
                        max_digits=15,
                        null=True,
                        verbose_name="Portion Weight",
                    ),
                ),
                (
                    "prep_time_minutes",
                    models.IntegerField(
                        default=0,
                        help_text="Time required to prepare the recipe",
                        verbose_name="Preparation Time (minutes)",
                    ),
                ),
                (
                    "cook_time_minutes",
                    models.IntegerField(
                        default=0,
                        help_text="Time required to cook the recipe",
                        verbose_name="Cooking Time (minutes)",
                    ),
                ),
                (
                    "base_food_cost_per_portion",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Base food cost per portion calculated from the ingredients",
                        max_digits=15,
                        verbose_name="Base Food Cost per Portion",
                    ),
                ),
                (
                    "waste_factor_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("5.00"),
                        help_text="Cooking loss, prep waste, spillage (default 0%)",
                        max_digits=5,
                        verbose_name="Waste Factor Percentage",
                    ),
                ),
                (
                    "labour_cost_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("10.00"),
                        help_text="Optional: labour cost allocation (default 0%)",
                        max_digits=15,
                        verbose_name="Labour Cost Percentage",
                    ),
                ),
                (
                    "target_food_cost_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("30.00"),
                        help_text="Target food cost percentage (default 30%)",
                        max_digits=5,
                        verbose_name="Target Food Cost Percentage",
                    ),
                ),
                (
                    "suggested_selling_price_per_portion",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Calculated from the target food cost percentage",
                        max_digits=15,
                        verbose_name="Suggested Selling Price per Portion",
                    ),
                ),
                (
                    "actual_selling_price_per_portion",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Current selling price per portion",
                        max_digits=15,
                        null=True,
                        verbose_name="Actual Selling Price per Portion",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "is_seasonal",
                    models.BooleanField(default=False, verbose_name="Is Seasonal"),
                ),
                (
                    "last_costed_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last Costed Date"
                    ),
                ),
                (
                    "cost_calculation_notes",
                    models.TextField(blank=True, verbose_name="Cost Calculation Notes"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who created this object.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who last updated this object.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_%(class)s_set",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recipe",
                "verbose_name_plural": "Recipes",
                "ordering": ["dish_name"],
            },
        ),
        migrations.CreateModel(
            name="RecipeIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this object was created.",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time this object was last updated.",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Quantity needed for entire recipe",
                        max_digits=15,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                        verbose_name="Quantity",
                    ),
                ),
                (
                    "main_ingredient",
                    models.BooleanField(default=False, verbose_name="Main Ingredient"),
                ),
                (
                    "cost_per_unit",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0"),
                        help_text="Current weighted average cost per unit",
                        max_digits=15,
                        verbose_name="Cost per Unit",
                    ),
                ),
                (
                    "total_cost",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0"),
                        help_text="Quantity * cost per unit",
                        max_digits=15,
                        verbose_name="Total Cost",
                    ),
                ),
                (
                    "cost_per_portion",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0"),
                        help_text="Total cost / recipe serving size",
                        max_digits=15,
                        verbose_name="Cost per Portion",
                    ),
                ),
                (
                    "preparation_notes",
                    models.TextField(
                        blank=True,
                        help_text="e.g., diced, sliced, chopped, etc.",
                        verbose_name="Preparation Notes",
                    ),
                ),
                (
                    "is_optional",
                    models.BooleanField(default=False, verbose_name="Is Optional"),
                ),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipes",
                        to="restaurant_data.product",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="recipes.recipe",
                    ),
                ),
                (
                    "unit_of_recipe",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipe_ingredients",
                        to="restaurant_data.unitofmeasure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recipe Ingredient",
                "verbose_name_plural": "Recipe Ingredients",
                "ordering": ["recipe", "ingredient"],
            },
        ),
        migrations.CreateModel(
            name="RecipeCostSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this object was created.",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time this object was last updated.",
                        verbose_name="Updated at",
                    ),
                ),
                ("snapshot_date", models.DateTimeField(verbose_name="Snapshot Date")),
                (
                    "base_food_cost_per_portion",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=15,
                        verbose_name="Base Food Cost per Portion",
                    ),
                ),
                (
                    "waste_cost_per_portion",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=15,
                        verbose_name="Waste Cost per Portion",
                    ),
                ),
                (
                    "labor_cost_per_portion",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=15,
                        verbose_name="Labor Cost per Portion",
                    ),
                ),
                (
                    "total_cost_per_portion",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=15,
                        verbose_name="Total Cost per Portion",
                    ),
                ),
                (
                    "selling_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=15,
                        null=True,
                        verbose_name="Selling Price",
                    ),
                ),
                (
                    "food_cost_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Food Cost %",
                    ),
                ),
                (
                    "calculation_method",
                    models.CharField(
                        default="weighted_average",
                        max_length=50,
                        verbose_name="Calculation Method",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cost_snapshots",
                        to="recipes.recipe",
                        verbose_name="Recipe",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recipe Cost Snapshot",
                "verbose_name_plural": "Recipe Cost Snapshots",
                "ordering": ["-snapshot_date"],
            },
        ),
        migrations.CreateModel(
            name="RecipeVersion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time this object was created.",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="The date and time this object was last updated.",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "version_number",
                    models.CharField(max_length=10, verbose_name="Version"),
                ),
                ("effective_date", models.DateField(verbose_name="Effective Date")),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="End Date"),
                ),
                ("change_notes", models.TextField(blank=True, verbose_name="Changes")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="recipes.recipe",
                        verbose_name="Recipe",
                    ),
                ),
            ],
            options={
                "verbose_name": "Recipe Version",
                "verbose_name_plural": "Recipe Versions",
                "ordering": ["recipe", "-effective_date"],
                "unique_together": {("recipe", "effective_date")},
            },
        ),
    ]
